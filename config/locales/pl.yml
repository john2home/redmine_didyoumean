# Polish strings go here for Rails i18n
pl:
  dym_similar_issues_caption: "Zagadnienia o podobnych tytułach"
  dym_more_issues: "więcej"
  dym_in_project: "w projekcie"
  dym_settings: "Wybierz jakie kryteria powinny być uwzględnione przy wyszukiwaniu potencjalnych duplikatów"
  dym_ticket_status_label: "Zwracaj zagadnienia:"
  dym_ticket_status_enum_only_open: "tylko otwarte"
  dym_ticket_status_enum_all: "dowolne"
  dym_project_filter_label: "Zwracaj zagadnienia należące:"
  dym_project_filter_enum_just_current: "tylko do obecnego projektu"
  dym_project_filter_enum_current_and_children: "do obecnego projektu i podprojektów"
  dym_project_filter_enum_any_project: "do dowolnego projektu"
  dym_min_word_length_label: "Minimalna długość słowa powodująca rozpoczęcie wyszukiwania:"
  dym_limit: "Ogranicz listę wyników do:"
  dym_start_search_when_label: "Rozpocznij wyszukiwanie:"
  dym_start_search_when_enum_leaving_field: "po opuszczeniu pola tematu"
  dym_start_search_when_enum_while_typing: "w czasie wpisywania"
  dym_select_searching_method: "Metoda wyszukiwania:"
  dym_sql: "SQL Engine"
  dym_thinking_sphinx: "Thinking Sphinx Engine"
  dym_settings_search_method: "Wybierz metodę której chcesz użyć"
  dym_thinking_sphinx_info: "Aby uruchomić wyszukiwanie pełnotekstowe w consoli wprowadź: rake ts:index && rake ts:start"
  dym_search_by_ts_info: "Thinking Sphinx początkowo bierze słowa 1:1 potem ucina ostatnią literę i szuka ponownie (np. 'Running' będzie szukać 'Runner' 'Running' etc. ). Ucinanie działa do minimalnej długości słowa, które zostało zdefiniowane ponieżej."
  dym_search_by_sql_info: "SQL - szuka wyrazów 1:1 ('Changes GUI' będzie szukać 'Changes' i/lub 'GUI')"
  dym_search_difference: "Thinking Sphinx jest trochę szybszy od SQL(w większości przypadków), jeśli wprowadzisz dużo wyrazów wyświetli rezultaty w krótszym czasie niż SQL"
  dym_project_filter_enum_parent: "Bierzące drzewo projektów"